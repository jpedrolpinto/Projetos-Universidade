
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftORleftANDleftEQNEQLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEDIVMODrightUMINUSNOTAND ARRAY ASSIGN BEGIN BOOLEAN_TYPE CHAR_LITERAL CHAR_TYPE COLON COMMA DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQ FALSE FOR FUNCTION GE GT ID IF INTEGER INTEGER_TYPE LBRACKET LE LENGTH LPAREN LT MINUS MOD NEQ NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL REAL_TYPE RPAREN SEMICOLON STRING STRING_TYPE THEN TIMES TO TRUE VAR WHILE WRITE WRITELNprogram : PROGRAM ID SEMICOLON program_body DOTprogram_body : function_declarations block\n| blockfunction_declarations : function_declarations function_declaration\n| function_declarationfunction_declaration : FUNCTION ID LPAREN parameter_list RPAREN COLON type SEMICOLON block SEMICOLON\n| FUNCTION ID LPAREN RPAREN COLON type SEMICOLON block SEMICOLONparameter_list : parameter_list SEMICOLON parameter\n| parameterparameter : id_list COLON typeblock : declarations compound_statementdeclarations : VAR declaration_list\n| emptydeclaration_list : declaration_list declaration\n| declarationdeclaration : id_list COLON type SEMICOLONid_list : id_list COMMA ID\n| IDtype : INTEGER_TYPE\n| REAL_TYPE\n| STRING_TYPE\n| BOOLEAN_TYPE\n| CHAR_TYPE\n| array_typearray_type : ARRAY LBRACKET INTEGER DOTDOT INTEGER RBRACKET OF typecompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n| statementempty :statement : assignment_statement\n| if_statement\n| while_statement\n| for_statement\n| io_statement\n| compound_statement\n| emptyassignment_statement : var ASSIGN expr_bool\n| ID ASSIGN expr_boolif_statement : IF expr_bool THEN statement\n| IF expr_bool THEN statement ELSE statementwhile_statement : WHILE expr_bool DO statementfor_statement : FOR ID ASSIGN expr TO expr DO statement\n| FOR ID ASSIGN expr DOWNTO expr DO statementio_statement : WRITE LPAREN write_list RPAREN\n| WRITELN LPAREN write_list RPAREN\n| READ LPAREN read_list RPAREN\n| READLN LPAREN read_list RPAREN\n| WRITE\n| WRITELN\n| READ\n| READLNwrite_list : write_list COMMA write_param\n| write_paramread_list : read_list COMMA var\n| varwrite_param : expr_bool\n| STRINGexpr_bool : expr_bool OR expr_and\n| expr_andexpr_and : expr_and AND expr_rel\n| expr_relexpr_rel : expr op_rel expr\n| exprop_rel : EQ\n| NEQ\n| LT\n| GT\n| LE\n| GEexpr : expr PLUS termo\n| expr MINUS termo\n| termotermo : termo TIMES fator\n| termo DIVIDE fator\n| termo DIV fator\n| termo MOD fator\n| fatorfator : const\n| var\n| function_call\n| LPAREN expr_bool RPAREN\n| NOT fator\n| MINUS fator %prec UMINUSfunction_call : LENGTH LPAREN expr_bool RPAREN\n| ID LPAREN argument_list RPAREN\n| ID LPAREN RPARENargument_list : argument_list COMMA expr_bool\n| expr_boolconst : INTEGER\n| REAL\n| STRING\n| CHAR_LITERAL\n| TRUE\n| FALSEvar : ID\n| ID LBRACKET expr RBRACKET'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,13,],[0,-1,]),'ID':([2,10,11,17,19,20,34,35,36,41,42,44,46,47,48,49,55,60,61,72,73,74,75,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,114,115,126,129,150,153,160,162,164,165,178,179,],[3,18,22,33,22,-15,68,68,71,22,-14,88,33,68,68,68,68,68,68,68,68,123,123,33,68,68,68,68,68,-64,-65,-66,-67,-68,-69,68,68,68,68,68,68,33,68,22,-16,68,123,33,68,68,68,33,33,]),'SEMICOLON':([3,16,17,23,24,25,26,27,28,29,30,31,37,38,39,40,45,46,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,76,78,80,81,82,83,84,85,86,89,90,91,93,109,111,114,131,132,133,134,135,136,137,138,139,140,141,142,144,147,149,151,152,154,156,157,158,160,161,163,168,171,176,178,179,180,183,184,187,],[4,-11,-29,46,-28,-30,-31,-32,-33,-34,-35,-36,-48,-49,-50,-51,-26,-29,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,126,-9,129,-19,-20,-21,-22,-23,-24,-27,-37,-38,-29,-83,-82,-29,-96,-39,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,-41,-44,-45,-46,-47,-8,169,-10,-29,-85,-84,175,-40,181,-29,-29,185,-42,-43,-25,]),'FUNCTION':([4,6,8,15,181,185,],[10,10,-5,-4,-7,-6,]),'VAR':([4,6,8,15,169,175,181,185,],[11,11,-5,-4,11,11,-7,-6,]),'BEGIN':([4,6,8,9,12,15,17,19,20,42,46,93,114,129,160,169,175,178,179,181,185,],[-29,-29,-5,17,-13,-4,17,-12,-15,-14,17,17,17,-16,17,-29,-29,17,17,-7,-6,]),'DOT':([5,7,14,16,45,],[13,-3,-2,-11,-26,]),'IF':([17,46,93,114,160,178,179,],[34,34,34,34,34,34,34,]),'WHILE':([17,46,93,114,160,178,179,],[35,35,35,35,35,35,35,]),'FOR':([17,46,93,114,160,178,179,],[36,36,36,36,36,36,36,]),'WRITE':([17,46,93,114,160,178,179,],[37,37,37,37,37,37,37,]),'WRITELN':([17,46,93,114,160,178,179,],[38,38,38,38,38,38,38,]),'READ':([17,46,93,114,160,178,179,],[39,39,39,39,39,39,39,]),'READLN':([17,46,93,114,160,178,179,],[40,40,40,40,40,40,40,]),'END':([17,23,24,25,26,27,28,29,30,31,37,38,39,40,45,46,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,89,90,91,93,109,111,114,131,132,133,134,135,136,137,138,139,140,141,142,144,147,149,151,152,154,160,161,163,171,178,179,183,184,],[-29,45,-28,-30,-31,-32,-33,-34,-35,-36,-48,-49,-50,-51,-26,-29,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-27,-37,-38,-29,-83,-82,-29,-96,-39,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,-41,-44,-45,-46,-47,-29,-85,-84,-40,-29,-29,-42,-43,]),'LPAREN':([18,34,35,37,38,39,40,47,48,49,55,60,61,68,69,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[41,60,60,72,73,74,75,60,60,60,60,60,60,112,113,60,60,60,60,60,60,60,-64,-65,-66,-67,-68,-69,60,60,60,60,60,60,60,60,60,60,60,]),'COLON':([21,22,77,79,88,125,],[43,-18,127,128,-17,155,]),'COMMA':([21,22,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,79,88,109,111,116,117,118,119,120,121,122,123,124,131,133,134,135,136,137,138,139,140,141,142,143,144,145,161,163,166,167,172,],[44,-18,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,44,-17,-83,-82,150,-53,-56,-57,150,153,-55,-95,153,-96,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,162,-86,-88,-85,-84,-52,-54,-87,]),'ELSE':([25,26,27,28,29,30,31,37,38,39,40,45,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,90,91,93,109,111,114,131,132,133,134,135,136,137,138,139,140,141,142,144,147,149,151,152,154,160,161,163,171,178,179,183,184,],[-30,-31,-32,-33,-34,-35,-36,-48,-49,-50,-51,-26,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-37,-38,-29,-83,-82,-29,-96,160,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,-41,-44,-45,-46,-47,-29,-85,-84,-40,-29,-29,-42,-43,]),'ASSIGN':([32,33,71,131,],[47,48,115,-96,]),'LBRACKET':([33,68,87,123,],[49,49,130,49,]),'NOT':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-64,-65,-66,-67,-68,-69,61,61,61,61,61,61,61,61,61,61,61,]),'MINUS':([34,35,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,73,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,115,119,131,135,136,137,138,139,140,141,142,144,148,150,161,162,163,164,165,173,174,],[55,55,55,55,55,98,-72,55,-77,-78,-79,-80,55,55,-89,-90,-91,-92,-93,-94,-95,55,55,98,55,55,55,55,55,-64,-65,-66,-67,-68,-69,55,55,55,55,-83,-82,55,55,55,-91,-96,98,-70,-71,-73,-74,-75,-76,-81,-86,98,55,-85,55,-84,55,55,98,98,]),'INTEGER':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,130,150,162,164,165,170,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-64,-65,-66,-67,-68,-69,62,62,62,62,62,62,62,159,62,62,62,62,177,]),'REAL':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-64,-65,-66,-67,-68,-69,63,63,63,63,63,63,63,63,63,63,63,]),'STRING':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[64,64,64,64,64,64,64,64,119,119,64,64,64,64,64,-64,-65,-66,-67,-68,-69,64,64,64,64,64,64,64,119,64,64,64,]),'CHAR_LITERAL':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-64,-65,-66,-67,-68,-69,65,65,65,65,65,65,65,65,65,65,65,]),'TRUE':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-64,-65,-66,-67,-68,-69,66,66,66,66,66,66,66,66,66,66,66,]),'FALSE':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-64,-65,-66,-67,-68,-69,67,67,67,67,67,67,67,67,67,67,67,]),'LENGTH':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,115,150,162,164,165,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-64,-65,-66,-67,-68,-69,69,69,69,69,69,69,69,69,69,69,69,]),'RPAREN':([41,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,76,78,81,82,83,84,85,86,109,110,111,112,116,117,118,119,120,121,122,123,124,131,133,134,135,136,137,138,139,140,141,142,143,144,145,146,156,158,161,163,166,167,172,187,],[77,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,125,-9,-19,-20,-21,-22,-23,-24,-83,142,-82,144,149,-53,-56,-57,151,152,-55,-95,154,-96,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,161,-86,-88,163,-8,-10,-85,-84,-52,-54,-87,-25,]),'INTEGER_TYPE':([43,127,128,155,186,],[81,81,81,81,81,]),'REAL_TYPE':([43,127,128,155,186,],[82,82,82,82,82,]),'STRING_TYPE':([43,127,128,155,186,],[83,83,83,83,83,]),'BOOLEAN_TYPE':([43,127,128,155,186,],[84,84,84,84,84,]),'CHAR_TYPE':([43,127,128,155,186,],[85,85,85,85,85,]),'ARRAY':([43,127,128,155,186,],[87,87,87,87,87,]),'THEN':([50,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,131,133,134,135,136,137,138,139,140,141,142,144,161,163,],[93,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-96,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'OR':([50,51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,70,90,91,109,110,111,118,119,131,133,134,135,136,137,138,139,140,141,142,144,145,146,161,163,172,],[94,-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,94,94,94,-83,94,-82,94,-91,-96,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,94,94,-85,-84,94,]),'DO':([51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,70,109,111,131,133,134,135,136,137,138,139,140,141,142,144,161,163,173,174,],[-59,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,114,-83,-82,-96,-58,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,178,179,]),'AND':([51,52,53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,133,134,135,136,137,138,139,140,141,142,144,161,163,],[95,-61,-63,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,95,-60,-62,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'PLUS':([53,54,56,57,58,59,62,63,64,65,66,67,68,92,109,111,119,131,135,136,137,138,139,140,141,142,144,148,161,163,173,174,],[97,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,97,-83,-82,-91,-96,97,-70,-71,-73,-74,-75,-76,-81,-86,97,-85,-84,97,97,]),'EQ':([53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[99,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'NEQ':([53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[100,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'LT':([53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[101,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'GT':([53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[102,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'LE':([53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[103,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'GE':([53,54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[104,-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,]),'RBRACKET':([54,56,57,58,59,62,63,64,65,66,67,68,92,109,111,131,136,137,138,139,140,141,142,144,161,163,177,],[-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,131,-83,-82,-96,-70,-71,-73,-74,-75,-76,-81,-86,-85,-84,182,]),'TO':([54,56,57,58,59,62,63,64,65,66,67,68,109,111,131,136,137,138,139,140,141,142,144,148,161,163,],[-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-96,-70,-71,-73,-74,-75,-76,-81,-86,164,-85,-84,]),'DOWNTO':([54,56,57,58,59,62,63,64,65,66,67,68,109,111,131,136,137,138,139,140,141,142,144,148,161,163,],[-72,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-96,-70,-71,-73,-74,-75,-76,-81,-86,165,-85,-84,]),'TIMES':([54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[105,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,105,105,-73,-74,-75,-76,-81,-86,-85,-84,]),'DIVIDE':([54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[106,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,106,106,-73,-74,-75,-76,-81,-86,-85,-84,]),'DIV':([54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[107,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,107,107,-73,-74,-75,-76,-81,-86,-85,-84,]),'MOD':([54,56,57,58,59,62,63,64,65,66,67,68,109,111,119,131,136,137,138,139,140,141,142,144,161,163,],[108,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-83,-82,-91,-96,108,108,-73,-74,-75,-76,-81,-86,-85,-84,]),'DOTDOT':([159,],[170,]),'OF':([182,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_body':([4,],[5,]),'function_declarations':([4,],[6,]),'block':([4,6,169,175,],[7,14,176,180,]),'function_declaration':([4,6,],[8,15,]),'declarations':([4,6,169,175,],[9,9,9,9,]),'empty':([4,6,17,46,93,114,160,169,175,178,179,],[12,12,31,31,31,31,31,12,12,31,31,]),'compound_statement':([9,17,46,93,114,160,178,179,],[16,30,30,30,30,30,30,30,]),'declaration_list':([11,],[19,]),'declaration':([11,19,],[20,42,]),'id_list':([11,19,41,126,],[21,21,79,79,]),'statement_list':([17,],[23,]),'statement':([17,46,93,114,160,178,179,],[24,89,132,147,171,183,184,]),'assignment_statement':([17,46,93,114,160,178,179,],[25,25,25,25,25,25,25,]),'if_statement':([17,46,93,114,160,178,179,],[26,26,26,26,26,26,26,]),'while_statement':([17,46,93,114,160,178,179,],[27,27,27,27,27,27,27,]),'for_statement':([17,46,93,114,160,178,179,],[28,28,28,28,28,28,28,]),'io_statement':([17,46,93,114,160,178,179,],[29,29,29,29,29,29,29,]),'var':([17,34,35,46,47,48,49,55,60,61,72,73,74,75,93,94,95,96,97,98,105,106,107,108,112,113,114,115,150,153,160,162,164,165,178,179,],[32,58,58,32,58,58,58,58,58,58,58,58,122,122,32,58,58,58,58,58,58,58,58,58,58,58,32,58,58,167,32,58,58,58,32,32,]),'expr_bool':([34,35,47,48,60,72,73,112,113,150,162,],[50,70,90,91,110,118,118,145,146,118,172,]),'expr_and':([34,35,47,48,60,72,73,94,112,113,150,162,],[51,51,51,51,51,51,51,133,51,51,51,51,]),'expr_rel':([34,35,47,48,60,72,73,94,95,112,113,150,162,],[52,52,52,52,52,52,52,52,134,52,52,52,52,]),'expr':([34,35,47,48,49,60,72,73,94,95,96,112,113,115,150,162,164,165,],[53,53,53,53,92,53,53,53,53,53,135,53,53,148,53,53,173,174,]),'termo':([34,35,47,48,49,60,72,73,94,95,96,97,98,112,113,115,150,162,164,165,],[54,54,54,54,54,54,54,54,54,54,54,136,137,54,54,54,54,54,54,54,]),'fator':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,105,106,107,108,112,113,115,150,162,164,165,],[56,56,56,56,56,109,56,111,56,56,56,56,56,56,56,138,139,140,141,56,56,56,56,56,56,56,]),'const':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,105,106,107,108,112,113,115,150,162,164,165,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'function_call':([34,35,47,48,49,55,60,61,72,73,94,95,96,97,98,105,106,107,108,112,113,115,150,162,164,165,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'parameter_list':([41,],[76,]),'parameter':([41,126,],[78,156,]),'type':([43,127,128,155,186,],[80,157,158,168,187,]),'array_type':([43,127,128,155,186,],[86,86,86,86,86,]),'op_rel':([53,],[96,]),'write_list':([72,73,],[116,120,]),'write_param':([72,73,150,],[117,117,166,]),'read_list':([74,75,],[121,124,]),'argument_list':([112,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program_body DOT','program',5,'p_program','parser.py',42),
  ('program_body -> function_declarations block','program_body',2,'p_program_body','parser.py',52),
  ('program_body -> block','program_body',1,'p_program_body','parser.py',53),
  ('function_declarations -> function_declarations function_declaration','function_declarations',2,'p_function_declarations','parser.py',62),
  ('function_declarations -> function_declaration','function_declarations',1,'p_function_declarations','parser.py',63),
  ('function_declaration -> FUNCTION ID LPAREN parameter_list RPAREN COLON type SEMICOLON block SEMICOLON','function_declaration',10,'p_function_declaration','parser.py',71),
  ('function_declaration -> FUNCTION ID LPAREN RPAREN COLON type SEMICOLON block SEMICOLON','function_declaration',9,'p_function_declaration','parser.py',72),
  ('parameter_list -> parameter_list SEMICOLON parameter','parameter_list',3,'p_parameter_list','parser.py',81),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',82),
  ('parameter -> id_list COLON type','parameter',3,'p_parameter','parser.py',90),
  ('block -> declarations compound_statement','block',2,'p_block','parser.py',94),
  ('declarations -> VAR declaration_list','declarations',2,'p_declarations','parser.py',98),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',99),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',106),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',107),
  ('declaration -> id_list COLON type SEMICOLON','declaration',4,'p_declaration','parser.py',115),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',119),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',120),
  ('type -> INTEGER_TYPE','type',1,'p_type','parser.py',128),
  ('type -> REAL_TYPE','type',1,'p_type','parser.py',129),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',130),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','parser.py',131),
  ('type -> CHAR_TYPE','type',1,'p_type','parser.py',132),
  ('type -> array_type','type',1,'p_type','parser.py',133),
  ('array_type -> ARRAY LBRACKET INTEGER DOTDOT INTEGER RBRACKET OF type','array_type',8,'p_array_type','parser.py',140),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',144),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',148),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',149),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',158),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',162),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',163),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',164),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',165),
  ('statement -> io_statement','statement',1,'p_statement','parser.py',166),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',167),
  ('statement -> empty','statement',1,'p_statement','parser.py',168),
  ('assignment_statement -> var ASSIGN expr_bool','assignment_statement',3,'p_assignment_statement','parser.py',172),
  ('assignment_statement -> ID ASSIGN expr_bool','assignment_statement',3,'p_assignment_statement','parser.py',173),
  ('if_statement -> IF expr_bool THEN statement','if_statement',4,'p_if_statement','parser.py',182),
  ('if_statement -> IF expr_bool THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',183),
  ('while_statement -> WHILE expr_bool DO statement','while_statement',4,'p_while_statement','parser.py',190),
  ('for_statement -> FOR ID ASSIGN expr TO expr DO statement','for_statement',8,'p_for_statement','parser.py',194),
  ('for_statement -> FOR ID ASSIGN expr DOWNTO expr DO statement','for_statement',8,'p_for_statement','parser.py',195),
  ('io_statement -> WRITE LPAREN write_list RPAREN','io_statement',4,'p_io_statement','parser.py',202),
  ('io_statement -> WRITELN LPAREN write_list RPAREN','io_statement',4,'p_io_statement','parser.py',203),
  ('io_statement -> READ LPAREN read_list RPAREN','io_statement',4,'p_io_statement','parser.py',204),
  ('io_statement -> READLN LPAREN read_list RPAREN','io_statement',4,'p_io_statement','parser.py',205),
  ('io_statement -> WRITE','io_statement',1,'p_io_statement','parser.py',206),
  ('io_statement -> WRITELN','io_statement',1,'p_io_statement','parser.py',207),
  ('io_statement -> READ','io_statement',1,'p_io_statement','parser.py',208),
  ('io_statement -> READLN','io_statement',1,'p_io_statement','parser.py',209),
  ('write_list -> write_list COMMA write_param','write_list',3,'p_write_list','parser.py',216),
  ('write_list -> write_param','write_list',1,'p_write_list','parser.py',217),
  ('read_list -> read_list COMMA var','read_list',3,'p_read_list','parser.py',225),
  ('read_list -> var','read_list',1,'p_read_list','parser.py',226),
  ('write_param -> expr_bool','write_param',1,'p_write_param','parser.py',234),
  ('write_param -> STRING','write_param',1,'p_write_param','parser.py',235),
  ('expr_bool -> expr_bool OR expr_and','expr_bool',3,'p_expr_bool','parser.py',242),
  ('expr_bool -> expr_and','expr_bool',1,'p_expr_bool','parser.py',243),
  ('expr_and -> expr_and AND expr_rel','expr_and',3,'p_expr_and','parser.py',250),
  ('expr_and -> expr_rel','expr_and',1,'p_expr_and','parser.py',251),
  ('expr_rel -> expr op_rel expr','expr_rel',3,'p_expr_rel','parser.py',258),
  ('expr_rel -> expr','expr_rel',1,'p_expr_rel','parser.py',259),
  ('op_rel -> EQ','op_rel',1,'p_op_rel','parser.py',266),
  ('op_rel -> NEQ','op_rel',1,'p_op_rel','parser.py',267),
  ('op_rel -> LT','op_rel',1,'p_op_rel','parser.py',268),
  ('op_rel -> GT','op_rel',1,'p_op_rel','parser.py',269),
  ('op_rel -> LE','op_rel',1,'p_op_rel','parser.py',270),
  ('op_rel -> GE','op_rel',1,'p_op_rel','parser.py',271),
  ('expr -> expr PLUS termo','expr',3,'p_expr','parser.py',275),
  ('expr -> expr MINUS termo','expr',3,'p_expr','parser.py',276),
  ('expr -> termo','expr',1,'p_expr','parser.py',277),
  ('termo -> termo TIMES fator','termo',3,'p_termo','parser.py',284),
  ('termo -> termo DIVIDE fator','termo',3,'p_termo','parser.py',285),
  ('termo -> termo DIV fator','termo',3,'p_termo','parser.py',286),
  ('termo -> termo MOD fator','termo',3,'p_termo','parser.py',287),
  ('termo -> fator','termo',1,'p_termo','parser.py',288),
  ('fator -> const','fator',1,'p_fator','parser.py',295),
  ('fator -> var','fator',1,'p_fator','parser.py',296),
  ('fator -> function_call','fator',1,'p_fator','parser.py',297),
  ('fator -> LPAREN expr_bool RPAREN','fator',3,'p_fator','parser.py',298),
  ('fator -> NOT fator','fator',2,'p_fator','parser.py',299),
  ('fator -> MINUS fator','fator',2,'p_fator','parser.py',300),
  ('function_call -> LENGTH LPAREN expr_bool RPAREN','function_call',4,'p_function_call','parser.py',312),
  ('function_call -> ID LPAREN argument_list RPAREN','function_call',4,'p_function_call','parser.py',313),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',314),
  ('argument_list -> argument_list COMMA expr_bool','argument_list',3,'p_argument_list','parser.py',325),
  ('argument_list -> expr_bool','argument_list',1,'p_argument_list','parser.py',326),
  ('const -> INTEGER','const',1,'p_const','parser.py',334),
  ('const -> REAL','const',1,'p_const','parser.py',335),
  ('const -> STRING','const',1,'p_const','parser.py',336),
  ('const -> CHAR_LITERAL','const',1,'p_const','parser.py',337),
  ('const -> TRUE','const',1,'p_const','parser.py',338),
  ('const -> FALSE','const',1,'p_const','parser.py',339),
  ('var -> ID','var',1,'p_var','parser.py',350),
  ('var -> ID LBRACKET expr RBRACKET','var',4,'p_var','parser.py',351),
]
